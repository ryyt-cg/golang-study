// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: author.sql

package sqlgen

import (
	"context"
	"database/sql"
)

const countAuthors = `-- name: CountAuthors :one
SELECT count(*) FROM author
`

func (q *Queries) CountAuthors(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAuthors)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO author (
    name, bio
) VALUES (?, ?)
    RETURNING id, name, bio
`

type CreateAuthorParams struct {
	Name string
	Bio  sql.NullString
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, createAuthor, arg.Name, arg.Bio)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM author
WHERE id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, bio FROM author
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int64) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const getAuthorWithBooks = `-- name: GetAuthorWithBooks :many
SELECT author.id, author.name, author.bio, book.id, book.title, book.author_id, book.published FROM author
LEFT JOIN book ON author.id = book.author_id
WHERE author.id = ?
`

type GetAuthorWithBooksRow struct {
	Author Author
	Book   Book
}

func (q *Queries) GetAuthorWithBooks(ctx context.Context, id int64) ([]GetAuthorWithBooksRow, error) {
	rows, err := q.db.QueryContext(ctx, getAuthorWithBooks, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAuthorWithBooksRow
	for rows.Next() {
		var i GetAuthorWithBooksRow
		if err := rows.Scan(
			&i.Author.ID,
			&i.Author.Name,
			&i.Author.Bio,
			&i.Book.ID,
			&i.Book.Title,
			&i.Book.AuthorID,
			&i.Book.Published,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, bio FROM author
ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthor = `-- name: UpdateAuthor :one
UPDATE author
set name = ?,
    bio = ?
WHERE id = ?
RETURNING id, name, bio
`

type UpdateAuthorParams struct {
	Name string
	Bio  sql.NullString
	ID   int64
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, updateAuthor, arg.Name, arg.Bio, arg.ID)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}
